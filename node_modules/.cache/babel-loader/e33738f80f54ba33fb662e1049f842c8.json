{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar useJitsi = function useJitsi(_ref) {\n  var _ref$domain = _ref.domain,\n      domain = _ref$domain === undefined ? 'meet.jit.si' : _ref$domain,\n      roomName = _ref.roomName,\n      parentNodeId = _ref.parentNodeId;\n\n  var _useState = useState(null),\n      _useState2 = slicedToArray(_useState, 2),\n      jitsi = _useState2[0],\n      setJitsi = _useState2[1];\n\n  useEffect(function () {\n    if (window.JitsiMeetExternalAPI) {\n      var parentNode = parentNodeId ? document.getElementById(parentNodeId) : document.body; // eslint-disable-next-line no-undef\n\n      setJitsi(new JitsiMeetExternalAPI(domain, {\n        roomName: roomName,\n        parentNode: parentNode\n      }));\n    } else {\n      setJitsi({\n        error: 'JitsiMeetExternalAPI is not available, check if https://meet.jit.si/external_api.js was loaded'\n      });\n    }\n\n    return function () {\n      return jitsi && jitsi.dispose();\n    };\n  }, []);\n  return jitsi;\n};\n\nuseJitsi.propTypes = {\n  domain: PropTypes.string,\n  roomName: PropTypes.string.isRequired,\n  parentNodeId: PropTypes.string.isRequired\n};\n\nvar Jutsu = function Jutsu(props) {\n  var roomName = props.roomName,\n      displayName = props.displayName,\n      password = props.password,\n      subject = props.subject;\n  var loadingComponent = props.loadingComponent,\n      containerStyles = props.containerStyles,\n      jitsiContainerStyles = props.jitsiContainerStyles;\n\n  var _useState = useState(true),\n      _useState2 = slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var jitsi = useJitsi({\n    roomName: roomName,\n    parentNodeId: 'jitsi-container'\n  });\n  var containerStyle = {\n    width: '800px',\n    height: '400px'\n  };\n  var jitsiContainerStyle = {\n    display: loading ? 'none' : 'block',\n    width: '100%',\n    height: '100%'\n  };\n  useEffect(function () {\n    if (jitsi) {\n      jitsi.addEventListener('videoConferenceJoined', function () {\n        jitsi.executeCommand('displayName', displayName);\n        jitsi.executeCommand('password', password);\n        jitsi.executeCommand('subject', subject);\n        setLoading(false);\n      });\n    }\n\n    return function () {\n      return jitsi && jitsi.dispose();\n    };\n  }, [jitsi]);\n  return React.createElement('div', {\n    style: _extends({}, containerStyle, containerStyles)\n  }, loading && (loadingComponent || React.createElement('p', null, 'Loading ...')), React.createElement('div', {\n    id: 'jitsi-container',\n    style: _extends({}, jitsiContainerStyle, jitsiContainerStyles)\n  }));\n};\n\nJutsu.propTypes = {\n  roomName: PropTypes.string.isRequired,\n  displayName: PropTypes.string,\n  password: PropTypes.string,\n  subject: PropTypes.string,\n  loadingComponent: PropTypes.object,\n  containerStyles: PropTypes.object,\n  jitsiContainerStyles: PropTypes.object\n};\nexport { Jutsu, useJitsi };","map":null,"metadata":{},"sourceType":"module"}